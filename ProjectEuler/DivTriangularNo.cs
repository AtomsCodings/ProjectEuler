/* Name: Ana Thomas
 * Date: 15/07/17
 * 
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143?
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEuler
{
    public class DivTriangularNo
    {
        public void display()
        {
            Console.WriteLine("\n 12. Highly divisible triangular number \n");
            Console.WriteLine("The sequence of triangle numbers is generated by adding the natural numbers. \n");
            Console.WriteLine("So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... \n");
            Console.WriteLine("Let us list the factors of the first seven triangle numbers:");

            Console.WriteLine("1: 1");
            Console.WriteLine("3: 1,3");
            Console.WriteLine("6: 1,2,3,6");
            Console.WriteLine("15: 1,3,5,15 ");
            Console.WriteLine("10: 1,2,5,10");
            Console.WriteLine("21: 1,3,7,21");
            Console.WriteLine("28: 1,2,4,7,14,28 \n");

            Console.WriteLine("We can see that 28 is the first triangle number to have over five divisors. \n");
            Console.WriteLine("What is the value of the first triangle number to have over five hundred divisors?");

            Console.WriteLine(calc());
        }
        /// <summary>
        /// used brute force approach. Need to come back to do a quicker version.
        /// </summary>
        /// <returns></returns>
        public int calc()
        {
            bool findTriangleNo = true;
            int sum = 0;
            int index = 1;
            int divideCounter = 0;
            int targetNo = 500;

            while (findTriangleNo == true)
            {
                sum = sum + index;
                index++;
                divideCounter = 0;

                for (int i = 1; i <= sum; i++)
                {
                    if (sum % i == 0)
                    {
                        divideCounter++;

                        if (targetNo == divideCounter)
                        {
                            findTriangleNo = false;
                            break;
                        }
                    }
                }
            }
            return sum;
        }
    }
}
